datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified Boolean?    @default(false)
  userImages    UserImage[]
  sessions      Session[]
  // Optional for WebAuthn support
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comments      Comment[]
}

model UserImage {
  id           String   @id @default(cuid())
  userId       String
  imageUrl     String
  cloudinaryId String   @unique
  fileName     String   @unique
  userAvatar   Boolean
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([imageUrl])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  date        String
  author      String
  description String
  wordCount   Int
  readingTime String
  categories  String[]
  content     String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  author    String?
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[] @relation("comment_children")
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
}
