datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   Boolean?          @default(false)
  userImages      UserImage[]
  sessions        Session[]
  // Optional for WebAuthn support
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  comments        Comment[]
  likes           Like[]
  Forum           Forum[]
  Entry           Entry[]
  CurriculumVitae CurriculumVitae[]
}

model UserImage {
  id           String   @id @default(cuid())
  userId       String
  imageUrl     String
  cloudinaryId String   @unique
  fileName     String
  width        Int
  height       Int
  userAvatar   Boolean
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([imageUrl])
  @@index([cloudinaryId])
  @@index([fileName])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  content     String
  author      String
  date        DateTime
  imageUrl    String?
  wordCount   Int
  readingTime String
  category    String[]
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id          String    @id @default(cuid())
  author      String?
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parent      Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    Comment[] @relation("comment_children")
  Post        Post      @relation(fields: [postId], references: [slug], onDelete: Cascade)
  postId      String
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  Entry       Entry?    @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  forumPostId String?

  @@index([postId])
  @@index([userId])
  @@index([postId, userId])
  @@index([forumPostId])
  @@index([parentId])
}

model Like {
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post    @relation(fields: [postId], references: [slug], onDelete: Cascade)
  postId      String
  Entry       Entry?  @relation(fields: [forumPostId], references: [id])
  forumPostId String?

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Forum {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  posts       Entry[]
}

model Entry {
  id          String    @id @default(cuid())
  title       String
  content     String
  description String
  forumId     String
  forum       Forum     @relation(fields: [forumId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
}

model Tag {
  id             String   @id @default(cuid())
  title          String   @unique
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  relatedEntries Entry[]
}

model CurriculumVitae {
  id          String       @id @default(cuid())
  title       String
  isCurrent   Boolean      @default(false)
  isPrimary   Boolean      @default(false)
  description String
  phoneNumber String
  email       String
  website     String
  location    String
  github      String
  summary     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  experience  Experience[]
  education   Education[]
  skills      JobSkill[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Education {
  id          String              @id @default(cuid())
  institution String
  description String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  cv          CurriculumVitae     @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId        String
  projects    EducationProjects[]
}

model EducationProjects {
  id          String     @id @default(cuid())
  title       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Education   Education? @relation(fields: [educationId], references: [id], onDelete: Cascade)
  educationId String?
}

model Experience {
  id        String          @id @default(cuid())
  company   String
  jobTitle  String
  location  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  cv        CurriculumVitae @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId      String
  duties    Duty[]
}

model Duty {
  id           String      @id @default(cuid())
  title        String
  position     Int?        @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId String
}

model JobSkill {
  id       String          @id @default(cuid())
  category String
  skill    String[]
  cv       CurriculumVitae @relation(fields: [cvId], references: [id], onDelete: Cascade)
  cvId     String
}

model Publication {
  id          String   @id @default(cuid())
  title       String
  year        Int
  journal     String
  authors     String[]
  edition     String
  doi         String
  pmid        String
  pmcid       String
  pdf         String?
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
