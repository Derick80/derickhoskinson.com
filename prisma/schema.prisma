datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified Boolean?    @default(false)
  userImages    UserImage[]
  sessions      Session[]
  // Optional for WebAuthn support
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comments      Comment[]
  likes         Like[]
  Forum         Forum[]
  Entry         Entry[]
}

model UserImage {
  id           String   @id @default(cuid())
  userId       String
  imageUrl     String
  cloudinaryId String   @unique
  fileName     String   @unique
  userAvatar   Boolean
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([imageUrl])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id          String    @id @default(cuid())
  author      String?
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parent      Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    Comment[] @relation("comment_children")
  Post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  Entry       Entry?    @relation(fields: [forumPostId], references: [id])
  forumPostId String?
}

model Like {
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  post        Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  Entry       Entry?  @relation(fields: [forumPostId], references: [id])
  forumPostId String?

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Forum {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  posts       Entry[]
}

model Entry {
  id          String    @id @default(cuid())
  title       String
  content     String
  description String
  forumId     String
  forum       Forum     @relation(fields: [forumId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
}

model Tag {
  id             String   @id @default(cuid())
  title          String   @unique
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  relatedEntries Entry[]
}
